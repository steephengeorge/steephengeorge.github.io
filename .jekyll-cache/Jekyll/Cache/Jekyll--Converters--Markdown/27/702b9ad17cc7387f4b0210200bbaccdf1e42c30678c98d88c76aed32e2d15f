I"tI<h1 id="part-2-how-to-deploy-and-expose-a-service-using-minikube">Part-2: How to deploy and expose a service using Minikube?</h1>

<p>Refer to the previous <a href="https://soulmeadows.com/kubernetes/2017/12/20/kubernetes_build_environment.html">article</a> to find how to set up the Kubernetes local build environment in the development box.</p>

<p>I will create a spring-boot service and show how to deploy it in a Minikube cluster. As usual, I created a prototype using Spring starter and included the Spring web starter dependency. I have chosen the Spring-Boot version 2.3.7.RELEASE to make sure to avoid the compatibility issues raise when I try to deploy in Minikube.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;parent&gt;</span>

<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>

<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>

<span class="nt">&lt;version&gt;</span>2.3.7.RELEASE<span class="nt">&lt;/version&gt;</span>

<span class="nt">&lt;relativePath</span> <span class="nt">/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>

<span class="nt">&lt;/parent&gt;</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;build&gt;</span>

<span class="nt">&lt;plugins&gt;</span>

<span class="nt">&lt;plugin&gt;</span>

<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>

<span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>

<span class="nt">&lt;configuration&gt;</span>

<span class="nt">&lt;excludes&gt;</span>

<span class="nt">&lt;exclude&gt;</span>

<span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>

<span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>

<span class="nt">&lt;/exclude&gt;</span>

<span class="nt">&lt;/excludes&gt;</span>

<span class="nt">&lt;image&gt;</span>

<span class="nt">&lt;name&gt;</span>docker-registry.localdev:5000/sm/${project.artifactId}:${project.version}<span class="nt">&lt;/name&gt;</span>

<span class="nt">&lt;/image&gt;</span>

<span class="nt">&lt;/configuration&gt;</span>

<span class="nt">&lt;/plugin&gt;</span>

<span class="nt">&lt;/plugins&gt;</span>

<span class="nt">&lt;/build&gt;</span></code></pre></figure>

<p>Since I am using Spring-Boot version 2.3.7.RELEASE, I can’t directly build against the Minikube docker environment in Windows using IDE. If we try to build the image using IDE using the Spring-boot-maven plugin goal spring-boot:build-image, IDE looks for a docker set up against localhost. I don’t want to set up a redundant docker environment in my local build box. I will explain the alternative option shortly. Using Spring-boot version 2.4.1, we can configure a remote Docker environment to create the docker image.</p>

<h2 id="how-to-build-the-image-locally-and-push-it-to-the-docker-registry">How to build the image locally and push it to the Docker registry?</h2>

<ol>
  <li>Open a Windows PowerShell</li>
  <li>Execute the following command</li>
</ol>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">&gt;</span> minikube docker-env

<span class="nv">$Env</span>:DOCKER_TLS_VERIFY <span class="o">=</span> <span class="s2">"1"</span>

<span class="nv">$Env</span>:DOCKER_HOST <span class="o">=</span> <span class="s2">"tcp://192.168.99.100:2376"</span>

<span class="nv">$Env</span>:DOCKER_CERT_PATH <span class="o">=</span> <span class="s2">"C:</span><span class="se">\U</span><span class="s2">sers</span><span class="se">\s</span><span class="s2">teep</span><span class="se">\.</span><span class="s2">minikube</span><span class="se">\c</span><span class="s2">erts"</span>

<span class="nv">$Env</span>:MINIKUBE_ACTIVE_DOCKERD <span class="o">=</span> <span class="s2">"minikube"</span>

<span class="c"># To point your shell to minikube's docker-daemon, run:</span>

<span class="c"># &amp; minikube -p minikube docker-env | Invoke-Expression</span>

<span class="o">&gt;</span> &amp; minikube <span class="nt">-p</span> minikube docker-env | Invoke-Expressionmvn

<span class="o">&gt;</span> <span class="nb">cd</span> &lt;Java-project-directory&gt;

<span class="o">&gt;</span> mvn clean spring-boot:build-image

<span class="nt">----</span>

<span class="nt">------</span>

<span class="nt">-------</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/ca-certificates:helper'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/bellsoft-liberica:helper'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/bellsoft-liberica:java-security-properties'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding layer <span class="s1">'paketo-buildpacks/bellsoft-liberica:jre'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/bellsoft-liberica:jvmkill'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/executable-jar:class-path'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/spring-boot:helper'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/spring-boot:spring-cloud-bindings'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'paketo-buildpacks/spring-boot:web-application-type'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding 1/1 app layer<span class="o">(</span>s<span class="o">)</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Reusing layer <span class="s1">'launcher'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding layer <span class="s1">'config'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding label <span class="s1">'io.buildpacks.lifecycle.metadata'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding label <span class="s1">'io.buildpacks.build.metadata'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding label <span class="s1">'io.buildpacks.project.metadata'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding label <span class="s1">'org.opencontainers.image.title'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding label <span class="s1">'org.opencontainers.image.version'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding label <span class="s1">'org.springframework.boot.spring-configuration-metadata.json'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] Adding label <span class="s1">'org.springframework.boot.version'</span>

<span class="o">[</span>INFO] <span class="o">[</span>creator] <span class="se">\*\*\*</span> Images <span class="o">(</span>7b852de32b29<span class="o">)</span>:

<span class="o">[</span>INFO] <span class="o">[</span>creator] docker-registry.localdev:5000/sm/register-service:0.0.2

<span class="o">[</span>INFO]

<span class="o">[</span>INFO] Successfully built image <span class="s1">'docker-registry.localdev:5000/sm/register-service:0.0.2'</span>

<span class="o">[</span>INFO]

<span class="o">[</span>INFO] <span class="nt">------------------------------------------------------------------------</span>

<span class="o">[</span>INFO] BUILD SUCCESS

<span class="o">[</span>INFO] <span class="nt">------------------------------------------------------------------------</span>

<span class="o">[</span>INFO] Total <span class="nb">time</span>: 41.371 s

<span class="o">[</span>INFO] Finished at: 2021-01-03T15:50:41-08:00</code></pre></figure>

<p>Now we sucessfully created a docker image named docker-registry.localdev:5000/sm/register-service:0.0.2.</p>

<p>The next step is to push the image to the Docker registry.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker push docker-registry.localdev:5000/sm/register-service:0.0.2

The push refers to repository <span class="o">[</span>docker-registry.localdev:5000/sm/register-service]

60c0b38b207a: Pushed

126dd5439845: Layer already exists

14fdaac82fa0: Pushed

6763b99e3792: Layer already exists

c2e9ddddd4ef: Layer already exists

108b6855c4a6: Layer already exists

ab39aa8fd003: Layer already exists

0b18b1f120f4: Layer already exists

cf6b3a71f979: Pushed

ec0381c8f321: Layer already exists

89d24718af18: Layer already exists

eb0f7cd0acf8: Layer already exists

8cc74c487427: Layer already exists

cd208f0ddc9d: Layer already exists

a0d609deac92: Layer already exists

fe6d8881187d: Layer already exists

23135df75b44: Layer already exists

b43408d5f11b: Layer already exists

0.0.2: digest: sha256:64956dda55ffcb24f9e5623b2846c254abb1a17c3f853bd522192f1d521623bd size: 4087</code></pre></figure>

<h2 id="how-to-deploy-the-service-to-the-minikube">How to deploy the service to the Minikube?</h2>

<p>Let’s do dry runs and generate the deployment yml files</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">kubectl create deployment register-service

<span class="nt">--image</span> docker-registry.localdev:5000/sm/register-service:0.0.2

<span class="nt">-o</span> yaml <span class="nt">--dry-run</span><span class="o">=</span>client <span class="o">&gt;</span>

../k8s/register-service-deployment.yml

kubectl create service clusterip register-service <span class="nt">--tcp</span> 9095:9095

<span class="nt">-o</span> yaml <span class="nt">--dry-run</span><span class="o">=</span>client <span class="o">&gt;</span> ../k8s/register-service.yml</code></pre></figure>

<p>The above steps generate the following yml files</p>

<figure class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>

<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>

<span class="na">metadata</span><span class="pi">:</span>

<span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>

<span class="na">labels</span><span class="pi">:</span>

<span class="na">app</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">name</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">spec</span><span class="pi">:</span>

<span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>

<span class="na">selector</span><span class="pi">:</span>

<span class="na">matchLabels</span><span class="pi">:</span>

<span class="na">app</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">strategy</span><span class="pi">:</span> <span class="pi">{}</span>

<span class="na">template</span><span class="pi">:</span>

<span class="na">metadata</span><span class="pi">:</span>

<span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>

<span class="na">labels</span><span class="pi">:</span>

<span class="na">app</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">spec</span><span class="pi">:</span>

<span class="na">containers</span><span class="pi">:</span>

<span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">docker-registry.localdev:5000/sm/register-service:0.0.2</span>

<span class="na">name</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>

<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>

<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>

<span class="na">metadata</span><span class="pi">:</span>

<span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>

<span class="na">labels</span><span class="pi">:</span>

<span class="na">app</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">name</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">spec</span><span class="pi">:</span>

<span class="na">ports</span><span class="pi">:</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">9095-9095</span>

<span class="na">port</span><span class="pi">:</span> <span class="m">9095</span>

<span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>

<span class="na">targetPort</span><span class="pi">:</span> <span class="m">9095</span>

<span class="na">selector</span><span class="pi">:</span>

<span class="na">app</span><span class="pi">:</span> <span class="s">register-service</span>

<span class="na">type</span><span class="pi">:</span> <span class="s">ClusterIP</span>

<span class="na">status</span><span class="pi">:</span>

<span class="na">loadBalancer</span><span class="pi">:</span> <span class="pi">{}</span><span class="s1">'</span></code></pre></figure>

<p>To deploy the service into our local Minikube execute the command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">&gt;</span> kubectl apply <span class="nt">-f</span> ..<span class="se">\k</span>8s

deployment.apps/register-service created

service/register-service created

kubectl get po

NAME READY STATUS RESTARTS AGE

register-service-57495f79fb-z5djj 1/1 Running 0 66m

PS C:<span class="se">\c</span>ode<span class="se">\j</span>ava<span class="se">\s</span>oulMeadows<span class="se">\r</span>egister-service&gt; kubectl get svc

NAME TYPE CLUSTER-IP EXTERNAL-IP PORT<span class="o">(</span>S<span class="o">)</span> AGE

kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 23d

register-service ClusterIP 10.105.89.134 &lt;none&gt; 9095/TCP 66m</code></pre></figure>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">kubectl logs register-service-57495f79fb-z5djj

Setting Active Processor Count to 4

Calculating JVM memory based on 1136752K available memory

Calculated JVM Memory Configuration: <span class="nt">-XX</span>:MaxDirectMemorySize<span class="o">=</span>10M <span class="nt">-Xmx517911K</span> <span class="nt">-XX</span>:MaxMetaspaceSize<span class="o">=</span>106840K <span class="nt">-XX</span>:ReservedCodeCacheSize<span class="o">=</span>240M <span class="nt">-Xss1M</span> <span class="o">(</span>Total Memory: 1136752K, Thread Count: 250, Loaded Class Count: 16449, Headroom: 0%<span class="o">)</span>

Adding 138 container CA certificates to JVM truststore

Spring Cloud Bindings Enabled

Picked up JAVA_TOOL_OPTIONS: <span class="nt">-Djava</span>.security.properties<span class="o">=</span>/layers/paketo-buildpacks_bellsoft-liberica/java-security-properties/java-security.properties <span class="nt">-agentpath</span>:/layers/paketo-buildpacks_bellsoft-liberica/jvmkill/jvmkill-1.16.0-RELEASE.so<span class="o">=</span><span class="nv">printHeapHistogram</span><span class="o">=</span>1 <span class="nt">-XX</span>:ActiveProcessorCount<span class="o">=</span>4 <span class="nt">-XX</span>:MaxDirectMemorySize<span class="o">=</span>10M <span class="nt">-Xmx517911K</span> <span class="nt">-XX</span>:MaxMetaspaceSize<span class="o">=</span>106840K <span class="nt">-XX</span>:ReservedCodeCacheSize<span class="o">=</span>240M <span class="nt">-Xss1M</span> <span class="nt">-Dorg</span>.springframework.cloud.bindings.boot.enable<span class="o">=</span><span class="nb">true</span>

<span class="nt">----</span>

<span class="nt">------</span>

2021-01-04 00:35:17.429 INFO 1 <span class="nt">---</span> <span class="o">[</span>main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: <span class="o">[</span>Apache Tomcat/9.0.41]

2021-01-04 00:35:17.591 INFO 1 <span class="nt">---</span> <span class="o">[</span>main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext

2021-01-04 00:35:17.591 INFO 1 <span class="nt">---</span> <span class="o">[</span>main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed <span class="k">in </span>1851 ms

2021-01-04 00:35:17.957 INFO 1 <span class="nt">---</span> <span class="o">[</span>main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService <span class="s1">'applicationTaskExecutor'</span>

2021-01-04 00:35:18.502 INFO 1 <span class="nt">---</span> <span class="o">[</span>main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port<span class="o">(</span>s<span class="o">)</span>: 9095 <span class="o">(</span>http<span class="o">)</span> with context path <span class="s1">''</span>

2021-01-04 00:35:18.519 INFO 1 <span class="nt">---</span> <span class="o">[</span>main] c.s.r.RegisterServiceApplication : Started RegisterServiceApplication <span class="k">in </span>6.193 seconds <span class="o">(</span>JVM running <span class="k">for </span>6.955<span class="o">)</span></code></pre></figure>

<p>You may observe some exceptions in the starting log stack. Please ignore it for the time being. It is not a show stopper.</p>

<p>Time is up to port forward and validate the service up and running:</p>

<h2 id="how-to-expose-the-service-from-the-minikube">How to expose the service from the Minikube?</h2>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">kubectl port-forward service/register-service 9095:9095

Forwarding from 127.0.0.1:9095 -&gt; 9095

Forwarding from <span class="o">[</span>::1]:9095 -&gt; 9095</code></pre></figure>

<p>try the URL: http://localhost:9095/registerSvc/api/address from Postman:</p>

<p>expected result</p>

<hr />

<p>Address1</p>

<p>We are good. You can find the github repository <a href="https://github.com/steephengeorge/experiments/tree/main/register-service">here</a> &amp;&amp; <a href="https://github.com/steephengeorge/experiments/tree/main/k8s">k8s files</a></p>
:ET