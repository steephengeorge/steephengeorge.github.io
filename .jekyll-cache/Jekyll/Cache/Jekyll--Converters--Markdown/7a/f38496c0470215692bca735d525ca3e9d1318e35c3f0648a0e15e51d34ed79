I"n)<h1 id="route-using-spring-cloud-gateway">Route using Spring Cloud Gateway</h1>

<p>Spring Cloud Gateway is one of the components in the Spring Cloud framework. Here we will figure out how to route the REST traffic to different service endpoints using Spring Cloud Gateway. In most examples, I have seen following the same practice of using the application.yml file to set up configurations as shown in Spring documentation. I will initially set it up using YAML then I will convert it into old fashion application. properties. This may be useful to generate a Kubernetes configMap because configMap generation utilities are available to generate it from a conventional application.properties file.</p>

<p>I have 3 services in place:</p>

<ol>
  <li>registerSvc</li>
  <li>searchSvc</li>
  <li>gatewaySvc</li>
</ol>

<h2 id="registersvc">RegisterSvc</h2>

<p>I have a REST endpoint in this service configured with port number 9095.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RestController</span>

<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/registerSvc/api"</span><span class="o">)</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressController</span> <span class="o">{</span>

<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/address"</span><span class="o">)</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>

<span class="k">return</span> <span class="s">"Address1"</span><span class="o">;</span>

<span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<h2 id="searchsvc">SearchSvc</h2>

<p>In searchSvc, I have a REST endpoint set up using port number 9096</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RestController</span>

<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/searchSvc/api"</span><span class="o">)</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">preferenceController</span> <span class="o">{</span>

<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/preferences"</span><span class="o">)</span>

<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getPreferences</span><span class="o">(){</span>

<span class="k">return</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"reading"</span><span class="o">,</span> <span class="s">"music"</span><span class="o">);</span>

<span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<h2 id="gatewaysvc">GatewaySvc</h2>

<p>It has a Spring cloud gateway as a dependency.</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependency&gt;</span>

<span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>

<span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-gateway<span class="nt">&lt;/artifactId&gt;</span>

<span class="nt">&lt;/dependency&gt;</span></code></pre></figure>

<p>I didnâ€™t write a single line of code in this service other than this application.yml file. All magic is happening here.</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">server</span><span class="pi">:</span>

<span class="na">port</span><span class="pi">:</span> <span class="m">9097</span>

<span class="na">spring</span><span class="pi">:</span>

<span class="na">cloud</span><span class="pi">:</span>

<span class="na">gateway</span><span class="pi">:</span>

<span class="na">routes</span><span class="pi">:</span>

<span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">registerSvc</span>

<span class="na">uri</span><span class="pi">:</span> <span class="s">http://localhost:9095/</span>

<span class="na">predicates</span><span class="pi">:</span>

<span class="pi">-</span> <span class="s">Path=/registerSvc/api/**</span>

<span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">searchSvc</span>

<span class="na">uri</span><span class="pi">:</span> <span class="s">http://localhost:9096/</span>

<span class="na">predicates</span><span class="pi">:</span>

<span class="pi">-</span> <span class="s">Path=/searchSvc/api/**</span></code></pre></figure>

<p>Once all three services are up and running, I can test these endpoints using Postman using the following URLs.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">URL</span><span class="p">:</span> <span class="nx">http</span><span class="p">:</span><span class="c1">//localhost:9097/registerSvc/api/address</span>

<span class="nx">Response</span><span class="p">:</span> <span class="nx">Address1</span>

<span class="nx">URL</span><span class="p">:</span> <span class="nx">http</span><span class="p">:</span><span class="c1">//localhost:9097/searchSvc/api/preferences</span>

<span class="nx">Response</span><span class="p">:</span>

<span class="p">[</span>

<span class="dl">"</span><span class="s2">reading</span><span class="dl">"</span><span class="p">,</span>

<span class="dl">"</span><span class="s2">music</span><span class="dl">"</span>

<span class="p">]</span></code></pre></figure>

<h2 id="how-to-set-up-application-properties">How to set up Application. properties</h2>

<p>When I started working on it, I felt it will be pretty easy. I need to expand the YAML tree. But Gateway services spewing trash on my attempts. In the YAML file, we generated a short form of configuration. To attain a corresponding application.properties file, the trick is to go after detailed recommendation under the Fully Expanded Arguments approach</p>

<p>detailed <a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/index.html#fully-expanded-arguments">here</a>.</p>

<p>So it is a two-step process, first, change the YAML format to a fully expanded format. Second, flatten the YAML format and write down the application.properties</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">server</span><span class="p">.</span><span class="nx">port</span><span class="o">=</span><span class="mi">9098</span>

<span class="nx">spring</span><span class="p">.</span><span class="nx">cloud</span><span class="p">.</span><span class="nx">gateway</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">searchSvc</span>

<span class="nx">spring</span><span class="p">.</span><span class="nx">cloud</span><span class="p">.</span><span class="nx">gateway</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">uri</span> <span class="o">=</span> <span class="nx">http</span><span class="p">:</span><span class="c1">//localhost:9096/</span>

<span class="nx">spring</span><span class="p">.</span><span class="nx">cloud</span><span class="p">.</span><span class="nx">gateway</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">predicates</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="o">=</span><span class="nx">Path</span>

<span class="nx">spring</span><span class="p">.</span><span class="nx">cloud</span><span class="p">.</span><span class="nx">gateway</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">predicates</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">args</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">Path</span>

<span class="nx">spring</span><span class="p">.</span><span class="nx">cloud</span><span class="p">.</span><span class="nx">gateway</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">predicates</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">args</span><span class="p">.</span><span class="nx">regexp</span> <span class="o">=</span><span class="sr">/searchSvc/</span><span class="nx">api</span><span class="cm">/**

spring.cloud.gateway.routes[1].id = registerSvc

spring.cloud.gateway.routes[1].uri = http://localhost:9095/

spring.cloud.gateway.routes[1].predicates[0].name=Path

spring.cloud.gateway.routes[1].predicates[0].args.name = Path

spring.cloud.gateway.routes[1].predicates[0].args.regexp =/registerSvc/api/**</span></code></pre></figure>

<p>You can delete or rename the application.yml and restart the service. You can test the REST endpoints through gatewaySvc as follows:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">URL</span><span class="p">:</span> <span class="nx">http</span><span class="p">:</span><span class="c1">//localhost:9098/registerSvc/api/address</span>

<span class="nx">Response</span><span class="p">:</span> <span class="nx">Address1</span>

<span class="nx">URL</span><span class="p">:</span> <span class="nx">http</span><span class="p">:</span><span class="c1">//localhost:9098/searchSvc/api/preferences</span>

<span class="nx">Response</span><span class="p">:</span>

<span class="p">[</span>

<span class="dl">"</span><span class="s2">reading</span><span class="dl">"</span><span class="p">,</span>

<span class="dl">"</span><span class="s2">music</span><span class="dl">"</span>

<span class="p">]</span></code></pre></figure>

<p>You can find all code in GitHub:</p>

<ul>
  <li><a href="https://github.com/steephengeorge/experiments/tree/main/searchSvc">searchSvc</a></li>
  <li><a href="https://github.com/steephengeorge/experiments/tree/main/registerSvc">registerSvc</a></li>
  <li><a href="https://github.com/steephengeorge/experiments/tree/main/gatewaySvc">gatewaySvc</a></li>
</ul>
:ET